// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  email      String   @unique
  password   String
  permission String
  Person     Person[]
}

model Person {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  cpf              String            @unique
  dType            String
  phone            String
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?           @db.ObjectId
  Employee         Employee?
  RegulatoryDoctor RegulatoryDoctor?
}

model Employee {
  id           String   @id @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  registration String
  person       Person   @relation(fields: [id], references: [id])
  Doctor       Doctor?
}

model RegulatoryDoctor {
  id        String    @id @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  crm       String    @unique
  insurance String
  person    Person    @relation(fields: [id], references: [id])
  Request   Request[]
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @unique
}

model Hospital {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  phone         String
  latitude      Float
  longitude     Float
  availableBeds Int
  icuAvailable  Boolean
}

model Patient {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  birthDate      DateTime
  name           String
  medicalRecords MedicalRecord[]
  Transfer       Transfer[]
  Request        Request[]
}

model MedicalRecord {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  prescribedDrugs PrescribedDrug[]
  Patient         Patient?         @relation(fields: [patientId], references: [id])
  patientId       String?          @db.ObjectId
}

model PrescribedDrug {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  dosageInfo         String
  dosageAmount       Float
  administration     String
  administrationDate DateTime
  MedicalRecord      MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId    String?        @db.ObjectId
}

model Drug {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  name             String   @unique
  activeIngredient String
  description      String
}

model Transfer {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  originDoctor        Doctor   @relation("originDoctor", fields: [originDoctorId], references: [id])
  originDoctorId      String   @db.ObjectId
  destinationDoctor   Doctor   @relation("destinationDoctor", fields: [destinationDoctorId], references: [id])
  destinationDoctorId String   @db.ObjectId
  patient             Patient  @relation(fields: [patientId], references: [id])
  patientId           String   @db.ObjectId
}

model Doctor {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  crm        String   @unique
  Employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @unique @db.ObjectId

  originTransfers      Transfer[] @relation("originDoctor")
  destinationTransfers Transfer[] @relation("destinationDoctor")
}

model Request {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  patient            Patient            @relation(fields: [patientId], references: [id])
  patientId          String             @db.ObjectId
  specialty          Specialty          @relation(fields: [specialtyId], references: [id])
  specialtyId        String             @db.ObjectId
  regulatoryDoctor   RegulatoryDoctor   @relation(fields: [regulatoryDoctorId], references: [id])
  regulatoryDoctorId String             @db.ObjectId
  TransferDocument   TransferDocument[]
}

model Specialty {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String
  Request     Request[]
}

model TransferDocument {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  number      String
  observation String
  request     Request  @relation(fields: [requestId], references: [id])
  requestId   String   @db.ObjectId
}
