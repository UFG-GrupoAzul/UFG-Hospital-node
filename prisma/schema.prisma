// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String
  email      String   @unique
  password   String
  permission String
  Person     Person[]
}

model Person {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  cpf              String
  dType            String
  phone            String
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?           @db.ObjectId
  gender           Gender
  Employee         Employee?
  RegulatoryDoctor RegulatoryDoctor?
  Patient          Patient?

  @@unique([cpf, dType])
}

model Employee {
  id           String   @id @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  registration String
  person       Person   @relation(fields: [id], references: [id], onDelete: Cascade)
  Doctor       Doctor?
  Position     Position @relation(fields: [positionId], references: [id])
  positionId   String   @db.ObjectId
}

model RegulatoryDoctor {
  id        String    @id @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  crm       String    @unique
  insurance String
  person    Person    @relation(fields: [id], references: [id], onDelete: Cascade)
  Transfer  Transfer?
}

model Position {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String     @unique
  Employee    Employee[]
}

model Hospital {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  phone         String
  latitude      Float
  longitude     Float
  availableBeds Int
  icuAvailable  Boolean
}

model Patient {
  id            String         @id @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  person        Person         @relation(fields: [id], references: [id], onDelete: Cascade)
  birthDate     DateTime
  Transfer      Transfer?
  Request       Request[]
  MedicalRecord MedicalRecord?
  bloodType     BloodType      @default(UNDEFINED)
}

model MedicalRecord {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  PrescribedDrug   PrescribedDrug[]
  Patient          Patient           @relation(fields: [patientId], references: [id])
  patientId        String            @unique @db.ObjectId
  TransferDocument TransferDocument?
}

model PrescribedDrug {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  dosageInfo         String
  dosageAmount       Float
  administration     String
  administrationDate DateTime
  MedicalRecord      MedicalRecord? @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId    String?        @db.ObjectId
  Drug               Drug           @relation(fields: [drugId], references: [id])
  drugId             String         @db.ObjectId
  dosageUnit         DosageUnit     @default(G)
}

model Drug {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String           @unique
  activeIngredient String
  description      String
  PrescribedDrug   PrescribedDrug[]
}

model Transfer {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  originDoctor        Doctor           @relation("originDoctor", fields: [originDoctorId], references: [id])
  originDoctorId      String           @unique @db.ObjectId
  destinationDoctor   Doctor           @relation("destinationDoctor", fields: [destinationDoctorId], references: [id])
  destinationDoctorId String           @unique @db.ObjectId
  regulatoryDoctor    RegulatoryDoctor @relation(fields: [regulatoryDoctorId], references: [id])
  regulatoryDoctorId  String           @unique @db.ObjectId
  timeOfExit          DateTime
  eta                 DateTime
  patient             Patient          @relation(fields: [patientId], references: [id])
  patientId           String           @unique @db.ObjectId
  Request             Request?         @relation(fields: [requestId], references: [id])
  requestId           String           @unique @db.ObjectId
  transport           Transport        @default(LAND)
}

model Doctor {
  id                   String    @id @map("_id") @db.ObjectId
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  crm                  String    @unique
  Employee             Employee  @relation(fields: [id], references: [id], onDelete: Cascade)
  originTransfers      Transfer? @relation("originDoctor")
  destinationTransfers Transfer? @relation("destinationDoctor")
}

model Request {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  patient            Patient          @relation(fields: [patientId], references: [id])
  patientId          String           @db.ObjectId
  specialty          Specialty        @relation(fields: [specialtyId], references: [id])
  specialtyId        String           @db.ObjectId
  TransferDocument   TransferDocument @relation(fields: [transferDocumentId], references: [id])
  transferDocumentId String           @unique @db.ObjectId
  Transfer           Transfer?
  classification     Classification   @default(TERTIARY)
}

model TransferDocument {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  number          String
  observation     String
  Request         Request?
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String        @unique @db.ObjectId
}

model Specialty {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String    @unique
  description String
  Request     Request[]
}

// Enums traduzidos para inglÃªs e com valores representativos
enum Gender {
  MALE   @map("Male")
  FEMALE @map("Female")
}

enum BloodType {
  A_POSITIVE  @map("A+")
  A_NEGATIVE  @map("A-")
  B_POSITIVE  @map("B+")
  B_NEGATIVE  @map("B-")
  O_POSITIVE  @map("O+")
  O_NEGATIVE  @map("O-")
  AB_POSITIVE @map("AB+")
  AB_NEGATIVE @map("AB-")
  UNDEFINED   @map("Undefined")
}

enum Classification {
  PRIMARY   @map("Primary")
  SECONDARY @map("Secondary")
  TERTIARY  @map("Tertiary")
}

enum Transport {
  LAND       @map("Land")
  PLANE      @map("Plane")
  HELICOPTER @map("Helicopter")
}

enum DosageUnit {
  MG @map("Milligram")
  G  @map("Grams")
  CP @map("Capsule")
}
